{
  "version": 3,
  "sources": ["../../buffer-layout/lib/Layout.js", "../../@coral-xyz/borsh/src/index.ts"],
  "sourcesContent": ["/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Buffer instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n\n'use strict';\n\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n  constructor(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n    this.span = span;\n\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n  makeDestinationObject() {\n    return {};\n  }\n\n  /**\n   * Decode from a Buffer into an JavaScript value.\n   *\n   * @param {Buffer} b - the buffer from which encoded data is read.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {(Number|Array|Object)} - the value of the decoded data.\n   *\n   * @abstract\n   */\n  decode(b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Encode a JavaScript value into a Buffer.\n   *\n   * @param {(Number|Array|Object)} src - the value to be encoded into\n   * the buffer.  The type accepted depends on the (sub-)type of {@link\n   * Layout}.\n   *\n   * @param {Buffer} b - the buffer into which encoded data will be\n   * written.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {Number} - the number of bytes encoded, including the\n   * space skipped for internal padding, but excluding data such as\n   * {@link Sequence#count|lengths} when stored {@link\n   * ExternalLayout|externally}.  This is the adjustment to `offset`\n   * producing the offset where data for the next layout would be\n   * written.\n   *\n   * @abstract\n   */\n  encode(src, b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Buffer} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n  getSpan(b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n    return this.span;\n  }\n\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n  replicate(property) {\n    const rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  }\n\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n  fromArray(values) {\n    return undefined;\n  }\n}\nexports.Layout = Layout;\n\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n  return name;\n}\nexports.nameWithProperty = nameWithProperty;\n\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n  if (Class.hasOwnProperty('layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n  if (!(layout && (layout instanceof Layout))) {\n    throw new TypeError('layout must be a Layout');\n  }\n  if (layout.hasOwnProperty('boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n  layout.makeDestinationObject = (() => new Class());\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true,\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function(b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true,\n  });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n  isCount() {\n    throw new Error('ExternalLayout is abstract');\n  }\n}\n\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n  constructor(elementSpan, property) {\n    if (undefined === elementSpan) {\n      elementSpan = 1;\n    }\n    if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n    super(-1, property);\n\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n    this.elementSpan = elementSpan;\n  }\n\n  /** @override */\n  isCount() {\n    return true;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rem = b.length - offset;\n    return Math.floor(rem / this.elementSpan);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    return 0;\n  }\n}\n\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n  constructor(layout, offset, property) {\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    super(layout.span, property || layout.property);\n\n    /** The subordinated layout. */\n    this.layout = layout;\n\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Buffer\n     * being accessed.  */\n    this.offset = offset;\n  }\n\n  /** @override */\n  isCount() {\n    return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.decode(b, offset + this.offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.encode(src, b, offset + this.offset);\n  }\n}\n\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n  constructor(span, property) {\n    super( span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\nconst V2E32 = Math.pow(2, 32);\n\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n  const hi32 = Math.floor(src / V2E32);\n  const lo32 = src - (hi32 * V2E32);\n  return {hi32, lo32};\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readUInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatLE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatBE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleLE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleBE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n  constructor(elementLayout, count, property) {\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n    if (!(((count instanceof ExternalLayout) && count.isCount())\n          || (Number.isInteger(count) && (0 <= count)))) {\n      throw new TypeError('count must be non-negative integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n    let span = -1;\n    if ((!(count instanceof ExternalLayout))\n        && (0 < elementLayout.span)) {\n      span = count * elementLayout.span;\n    }\n\n    super(span, property);\n\n    /** The layout for individual elements of the sequence. */\n    this.elementLayout = elementLayout;\n\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n    this.count = count;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    if (0 < this.elementLayout.span) {\n      span = count * this.elementLayout.span;\n    } else {\n      let idx = 0;\n      while (idx < count) {\n        span += this.elementLayout.getSpan(b, offset + span);\n        ++idx;\n      }\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rv = [];\n    let i = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    while (i < count) {\n      rv.push(this.elementLayout.decode(b, offset));\n      offset += this.elementLayout.getSpan(b, offset);\n      i += 1;\n    }\n    return rv;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n   *\n   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n   * the unused space in the buffer is left unchanged.  If `src` is\n   * longer than {@link Sequence#count|count} the unneeded elements are\n   * ignored.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const elo = this.elementLayout;\n    const span = src.reduce((span, v) => {\n      return span + elo.encode(v, b, offset + span);\n    }, 0);\n    if (this.count instanceof ExternalLayout) {\n      this.count.encode(src.length, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n  constructor(fields, property, decodePrefixes) {\n    if (!(Array.isArray(fields)\n          && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n    if (('boolean' === typeof property)\n        && (undefined === decodePrefixes)) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n\n    /* Verify absence of unnamed variable-length fields. */\n    for (const fd of fields) {\n      if ((0 > fd.span)\n          && (undefined === fd.property)) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n\n    let span = -1;\n    try {\n      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n    } catch (e) {\n    }\n    super(span, property);\n\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n    this.fields = fields;\n\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n    this.decodePrefixes = !!decodePrefixes;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    try {\n      span = this.fields.reduce((span, fd) => {\n        const fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n      offset += fd.getSpan(b, offset);\n      if (this.decodePrefixes\n          && (b.length === offset)) {\n        break;\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const firstOffset = offset;\n    let lastOffset = 0;\n    let lastWrote = 0;\n    for (const fd of this.fields) {\n      let span = fd.span;\n      lastWrote = (0 < span) ? span : 0;\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n    return (lastOffset + lastWrote) - firstOffset;\n  }\n\n  /** @override */\n  fromArray(values) {\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if ((undefined !== fd.property)\n          && (0 < values.length)) {\n        dest[fd.property] = values.shift();\n      }\n    }\n    return dest;\n  }\n\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n  layoutFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n  offsetOf(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    let offset = 0;\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return offset;\n      }\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n  }\n}\n\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n  constructor(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n  decode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n  encode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n}\n\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n  constructor(layout, property) {\n    if (!((layout instanceof ExternalLayout)\n          && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    super(property || layout.property || 'variant');\n\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n    this.layout = layout;\n  }\n\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  decode(b, offset) {\n    return this.layout.decode(b, offset);\n  }\n\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  encode(src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  }\n}\n\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n  constructor(discr, defaultLayout, property) {\n    const upv = ((discr instanceof UInt)\n               || (discr instanceof UIntBE));\n    if (upv) {\n      discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if ((discr instanceof ExternalLayout)\n               && discr.isCount()) {\n      discr = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator '\n                          + 'or an unsigned integer layout');\n    }\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n    if (!((null === defaultLayout)\n          || (defaultLayout instanceof Layout))) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n    let span = -1;\n    if (defaultLayout) {\n      span = defaultLayout.span;\n      if ((0 <= span) && upv) {\n        span += discr.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n    this.discriminator = discr;\n\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n    this.usesPrefixDiscriminator = upv;\n\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n    this.defaultLayout = defaultLayout;\n\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n    this.registry = {};\n\n    /* Private variable used when invoking getSourceVariant */\n    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n    this.getSourceVariant = function(src) {\n      return boundGetSourceVariant(src);\n    };\n\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n    this.configGetSourceVariant = function(gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n    const vlo = this.getVariant(b, offset);\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n    return vlo.getSpan(b, offset);\n  }\n\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisified rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n  defaultGetSourceVariant(src) {\n    if (src.hasOwnProperty(this.discriminator.property)) {\n      if (this.defaultLayout\n          && src.hasOwnProperty(this.defaultLayout.property)) {\n        return undefined;\n      }\n      const vlo = this.registry[src[this.discriminator.property]];\n      if (vlo\n          && ((!vlo.layout)\n              || src.hasOwnProperty(vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (const tag in this.registry) {\n        const vlo = this.registry[tag];\n        if (src.hasOwnProperty(vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n    throw new Error('unable to infer src variant');\n  }\n\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let dest;\n    const dlo = this.discriminator;\n    const discr = dlo.decode(b, offset);\n    let clo = this.registry[discr];\n    if (undefined === clo) {\n      let contentOffset = 0;\n      clo = this.defaultLayout;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr;\n      dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const vlo = this.getSourceVariant(src);\n    if (undefined === vlo) {\n      const dlo = this.discriminator;\n      const clo = this.defaultLayout;\n      let contentOffset = 0;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dlo.encode(src[dlo.property], b, offset);\n      return contentOffset + clo.encode(src[clo.property], b,\n                                        offset + contentOffset);\n    }\n    return vlo.encode(src, b, offset);\n  }\n\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n  addVariant(variant, layout, property) {\n    const rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  }\n\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Buffer)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Buffer}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n  getVariant(vb, offset) {\n    let variant = vb;\n    if (Buffer.isBuffer(vb)) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      variant = this.discriminator.decode(vb, offset);\n    }\n    return this.registry[variant];\n  }\n}\n\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n  constructor(union, variant, layout, property) {\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n    if ((!Number.isInteger(variant)) || (0 > variant)) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n    if (('string' === typeof layout)\n        && (undefined === property)) {\n      property = layout;\n      layout = null;\n    }\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if ((null !== union.defaultLayout)\n          && (0 <= layout.span)\n          && (layout.span > union.defaultLayout.span)) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n    let span = union.span;\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n      if ((0 <= span) && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The {@link Union} to which this variant belongs. */\n    this.union = union;\n\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n    this.variant = variant;\n\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n    this.layout = layout || null;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n    return contentOffset + this.layout.getSpan(b, offset + contentOffset);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout) {\n      dest[this.property] = this.layout.decode(b, offset + contentOffset);\n    } else if (this.property) {\n      dest[this.property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n    return dest;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout\n        && (!src.hasOwnProperty(this.property))) {\n      throw new TypeError('variant lacks property ' + this.property);\n    }\n    this.union.discriminator.encode(this.variant, b, offset);\n    let span = contentOffset;\n    if (this.layout) {\n      this.layout.encode(src[this.property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n      if ((0 <= this.union.span)\n          && (span > this.union.span)) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n    return span;\n  }\n\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n  fromArray(values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n  }\n}\n\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n  return v;\n}\n\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n  constructor(word, msb, property) {\n    if (!((word instanceof UInt)\n          || (word instanceof UIntBE))) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n    if (('string' === typeof msb)\n        && (undefined === property)) {\n      property = msb;\n      msb = undefined;\n    }\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n    super(word.span, property);\n\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n    this.word = word;\n\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n    this.msb = !!msb;\n\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n    this.fields = [];\n\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n    let value = 0;\n    this._packedSetValue = function(v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n    this._packedGetValue = function() {\n      return value;\n    };\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(value);\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the packed\n   * value is left unmodified.  Unused bits are also left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          fd.encode(fv);\n        }\n      }\n    }\n    return this.word.encode(this._packedGetValue(), b, offset);\n  }\n\n  /** Register a new bitfield with a containing bit structure.  The\n   * resulting bitfield is returned.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {BitField} */\n  addField(bits, property) {\n    const bf = new BitField(this, bits, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /** As with {@link BitStructure#addField|addField} for single-bit\n   * fields with `boolean` value representation.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {Boolean} */\n  addBoolean(property) {\n    // This is my Boolean, not the Javascript one.\n    // eslint-disable-next-line no-new-wrappers\n    const bf = new Boolean(this, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /**\n   * Get access to the bit field for a given property.\n   *\n   * @param {String} property - the bit field of interest.\n   *\n   * @return {BitField} - the field associated with `property`, or\n   * undefined if there is no such property.\n   */\n  fieldFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n}\n\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n  constructor(container, bits, property) {\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n    if ((!Number.isInteger(bits)) || (0 >= bits)) {\n      throw new TypeError('bits must be positive integer');\n    }\n    const totalBits = 8 * container.span;\n    const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n    if ((bits + usedBits) > totalBits) {\n      throw new Error('bits too long for span remainder ('\n                      + (totalBits - usedBits) + ' of '\n                      + totalBits + ' remain)');\n    }\n\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n    this.container = container;\n\n    /** The span of this value in bits. */\n    this.bits = bits;\n\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n    this.valueMask = (1 << bits) - 1;\n    if (32 === bits) { // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n    this.start = usedBits;\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n  decode() {\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(word & this.wordMask);\n    const value = wordValue >>> this.start;\n    return value;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field.\n   *\n   * **NOTE** This is not a specialization of {@link\n   * Layout#encode|Layout.encode} and there is no return value. */\n  encode(value) {\n    if ((!Number.isInteger(value))\n        || (value !== fixBitwiseResult(value & this.valueMask))) {\n      throw new TypeError(nameWithProperty('BitField.encode', this)\n                          + ' value must be integer not exceeding ' + this.valueMask);\n    }\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(value << this.start);\n    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n                                   | wordValue);\n  };\n}\n\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n  constructor(container, property) {\n    super(container, 1, property);\n  }\n\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n  decode(b, offset) {\n    return !!BitField.prototype.decode.call(this, b, offset);\n  }\n\n  /** @override */\n  encode(value) {\n    if ('boolean' === typeof value) {\n      // BitField requires integer values\n      value = +value;\n    }\n    return BitField.prototype.encode.call(this, value);\n  }\n}\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Buffer.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n  constructor(length, property) {\n    if (!(((length instanceof ExternalLayout) && length.isCount())\n          || (Number.isInteger(length) && (0 <= length)))) {\n      throw new TypeError('length must be positive integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n\n    let span = -1;\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n    super(span, property);\n\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n    this.length = length;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return b.slice(offset, offset + span);\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    let span = this.length;\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n    if (!(Buffer.isBuffer(src)\n          && (span === src.length))) {\n      throw new TypeError(nameWithProperty('Blob.encode', this)\n                          + ' requires (length ' + span + ') Buffer as src');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    b.write(src.toString('hex'), offset, span, 'hex');\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n  constructor(property) {\n    super(-1, property);\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let idx = offset;\n    while ((idx < b.length) && (0 !== b[idx])) {\n      idx += 1;\n    }\n    return 1 + idx - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    return b.slice(offset, offset + span - 1).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    b[offset + span] = 0;\n    return span + 1;\n  }\n}\n\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n  constructor(maxSpan, property) {\n    if (('string' === typeof maxSpan)\n        && (undefined === property)) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    super(-1, property);\n\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n    this.maxSpan = maxSpan;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.length - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    return b.slice(offset, offset + span).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    return span;\n  }\n}\n\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n  constructor(value, property) {\n    super(0, property);\n\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n    this.value = value;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    return this.value;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    /* Constants take no space */\n    return 0;\n  }\n}\n\nexports.ExternalLayout = ExternalLayout;\nexports.GreedyCount = GreedyCount;\nexports.OffsetLayout = OffsetLayout;\nexports.UInt = UInt;\nexports.UIntBE = UIntBE;\nexports.Int = Int;\nexports.IntBE = IntBE;\nexports.Float = Float;\nexports.FloatBE = FloatBE;\nexports.Double = Double;\nexports.DoubleBE = DoubleBE;\nexports.Sequence = Sequence;\nexports.Structure = Structure;\nexports.UnionDiscriminator = UnionDiscriminator;\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\nexports.Union = Union;\nexports.VariantLayout = VariantLayout;\nexports.BitStructure = BitStructure;\nexports.BitField = BitField;\nexports.Boolean = Boolean;\nexports.Blob = Blob;\nexports.CString = CString;\nexports.UTF8 = UTF8;\nexports.Constant = Constant;\n\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = (property => new UInt(1, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = (property => new UInt(2, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = (property => new UInt(3, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = (property => new UInt(4, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = (property => new UInt(5, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = (property => new UInt(6, property));\n\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = (property => new NearUInt64(property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = (property => new UIntBE(2, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = (property => new UIntBE(3, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = (property => new UIntBE(4, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = (property => new UIntBE(5, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = (property => new UIntBE(6, property));\n\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = (property => new NearUInt64BE(property));\n\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = (property => new Int(1, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = (property => new Int(2, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = (property => new Int(3, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = (property => new Int(4, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = (property => new Int(5, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = (property => new Int(6, property));\n\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = (property => new NearInt64(property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = (property => new IntBE(2, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = (property => new IntBE(3, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = (property => new IntBE(4, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = (property => new IntBE(5, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = (property => new IntBE(6, property));\n\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = (property => new NearInt64BE(property));\n\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = (property => new Float(property));\n\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = (property => new FloatBE(property));\n\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = (property => new Double(property));\n\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = (property => new DoubleBE(property));\n\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n\n/** Factory for {@link CString} values. */\nexports.cstr = (property => new CString(property));\n\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n\n/** Factory for {@link Constant} values. */\nexports.const = ((value, property) => new Constant(value, property));\n", null],
  "mappings": "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",
  "names": ["import_dist", "span"]
}
